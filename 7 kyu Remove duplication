Write a function that accepts an array of number as parameter, and it returns array after removing all duplicated numbers.

Example removeDuplication([1,2,3,2,4,6,2,6,7]) Output [1,3,4,7].

Here 2,6 are duplicated in array, so we should remove all numbers that are duplicated. The output will be 1,3,4,7 after removing 2,6.

Input : [1,2,1,2,1,1,2,2] , Output : [].

Input : [2,5,6,7,5,2,6] , Output: [7].

function removeDuplication(arr) {
    // Create a map to count the occurrences of each number in the array.
    // The 'reduce' method accumulates these counts in an object called 'acc' (accumulator),
    // where each property name is a number from the array, and its value is the count of occurrences.
    const countMap = arr.reduce((acc, val) => {
        // If the number 'val' has already been encountered, increment its count.
        // Otherwise, initialize its count to 1.
        acc[val] = (acc[val] || 0) + 1;
        return acc; // Return the updated accumulator for the next iteration.
    }, {}); // The initial value of the accumulator is an empty object.

    // Filter the array to keep only those numbers that appear exactly once.
    // The 'filter' method creates a new array with all elements that pass the test implemented by the provided function.
    return arr.filter((val) => countMap[val] === 1);
    // Here, we check the 'countMap' for each number 'val'. If its count is 1, it means the number is not duplicated,
    // and thus, it is included in the new array returned by 'filter'.
}
==========================================================================
const removeDuplication = a => a.filter( v => a.indexOf(v)===a.lastIndexOf(v) ) ;
